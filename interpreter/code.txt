#lexer.h
#pragma once
#include <string>
#include <vector>
struct Token {
    enum Type {
        NUM, VAR, OP, LPAREN, RPAREN,
        LBRACE, RBRACE, SEMICOLON, ARROW,
        FUNCTION, WRITE, END, STRING, 
        IF, ELSE,EQUAL, NOT_EQUAL, LESS, 
        GREATER, LESS_EQUAL, GREATER_EQUAL,
        ASSIGN, COMMA, RETURN
    } type;
    std::string text;
};
class Lexer {
public:
    Lexer(const std::string& input);
    Token nextToken();
    char peek();
    char get();
    size_t getPosition() const;
    void setPosition(size_t pos);
    Token peekToken();
    int getLineNumber(size_t position) const;
    void setLineNumber(int newLine);
private:
    std::string input;
    size_t pos;
    bool hasBufferedToken = false;
    Token bufferedToken;
    int lineNumber = 1;
};

#lexer.cpp
#include "lexer.h"
#include <cctype>
#include <stdexcept>
Lexer::Lexer(const std::string& input) : input(input), pos(0) {}
char Lexer::peek() {
    return pos < input.size() ? input[pos] : '\0';
}
char Lexer::get() {
    if (pos >= input.size()) return '\0';
    char c = input[pos++];
    if (c == '\n') {
        lineNumber++;
    }
    return c;
}
int Lexer::getLineNumber(size_t position) const {
    if (position > input.size())
        position = input.size();
    int line = 1;
    for (size_t i = 0; i < position; ++i) {
        if (input[i] == '\n')
            ++line;
    }
    return line;
}
void Lexer::setLineNumber(int newLine) {
    lineNumber = newLine;
}
size_t Lexer::getPosition() const {
    return pos;
}
void Lexer::setPosition(size_t p) {
    pos = p;
    hasBufferedToken=false;
}
Token Lexer::peekToken() {
    if (!hasBufferedToken) {
        bufferedToken = nextToken();
        hasBufferedToken = true;
    }
    return bufferedToken;
}
Token Lexer::nextToken() {
    if (hasBufferedToken) {
        hasBufferedToken = false;
        return bufferedToken;
    }
    while (isspace(peek())) get();
    if (pos >= input.size()) {
        return {Token::END, ""};
    }
    char current = peek();
    if (isdigit(current)) {
        std::string num;
        while (isdigit(peek())) num.push_back(get());
        return {Token::NUM, num};
    }
    if (isalpha(current) || current == '_') {
        std::string var;
        while (isalnum(peek()) || peek() == '_') var.push_back(get());
        if (var == "function") return {Token::FUNCTION, var};
        if (var == "write") return {Token::WRITE, var};
        if (var == "if") return {Token::IF, var};
        if (var == "else") return {Token::ELSE, var};
        return {Token::VAR, var};
    }
    switch (current) {
        case '=':
            get();
            if (peek() == '=') {
                get();
                return {Token::EQUAL, "=="};
            }
            return {Token::ASSIGN, "="};

        case '!':
            get();
            if (peek() == '=') {
                get();
                return {Token::NOT_EQUAL, "!="};
            }
            throw std::runtime_error("Unexpected token '!'");
        
        case '<':
            get();
            if (peek() == '=') {
                get();
                return {Token::LESS_EQUAL, "<="};
            }
            return {Token::LESS, "<"};

        case '>':
            get();
            if (peek() == '=') {
                get();
                return {Token::GREATER_EQUAL, ">="};
            }
            return {Token::GREATER, ">"};

        case '-':
            get();
            if (peek() == '>') {
                get();
                return {Token::ARROW, "->"};
            }
            return {Token::OP, "-"};
        
        case '"': {
            get();  // consume opening quote
            std::string str;
            while (peek() != '"' && peek() != '\0') {
                str.push_back(get());
            }
            if (peek() == '"') get(); 
            else throw std::runtime_error("Unterminated string literal");
            return {Token::STRING, str};
        }
        case '+': case '*': case '/': {
            char op = get();
            return {Token::OP, std::string(1, op)};
        }
        case '(': get(); return {Token::LPAREN, "("};
        case ')': get(); return {Token::RPAREN, ")"};
        case '{': get(); return {Token::LBRACE, "{"};
        case '}': get(); return {Token::RBRACE, "}"};
        case ',': get(); return {Token::COMMA, ","};
        case ';': get(); return {Token::SEMICOLON, ";"};
    }
    throw std::runtime_error(std::string("Unknown character: ") + get());
}

#parser.h
#pragma once
#include "lexer.h"
#include <map>
#include <string>
#include <vector>
#include <variant>
#include <stack>
#include <unordered_map>
using Value = std::variant<int, std::string>;
class Parser {
public:
    Parser(Lexer lexer);
    void parse();
    int parseExpression();
    void statement();
    bool parseCondition();
    void parseIfStatement();
    void parseVarOrFunctionCall();
    int parseFunctionCallArgsAndExecute(const std::string& funcName);
    void parseWriteStatement();
    void parseFunctionDefinition();
    void printContextTokens(int contextSize = 5);
    bool hasReturnValue = false;
    int lastReturnValue = 0;
    std::vector<std::unordered_map<std::string, Value>> variableStack;
    std::vector<Value> parseFunctionArguments(const std::unordered_map<std::string, Value>& currentScope);
private:
    struct FunctionInfo {
        size_t position;
        std::vector<std::string> params;
    };
    void pushScope();
    void popScope();
    Value getVariableValue(const std::string& name);
    void setVariableValue(const std::string& name, Value value);
    std::map<std::string, FunctionInfo> functions;
    std::stack<std::pair<size_t, Token>> returnStates;
    Lexer lexer;
    Token currentToken;
    void consume(Token::Type expected);
    int expr();
    int term();
    int factor();
};

#parser.cpp
#include "parser.h"
#include "Debugger.h"
#include "ErrorHandler.h"
#include <iostream>
Parser::Parser(Lexer lexer) : lexer(lexer) {
    currentToken = this->lexer.nextToken();
}
void Parser::consume(Token::Type expected) {
    if (currentToken.type == expected)
        currentToken = lexer.nextToken();
    else
        ErrorHandler::throwError("Expected token type " + std::to_string(expected) + " but found '" + currentToken.text + "'", lexer.getLineNumber(lexer.getPosition()));
}
void Parser::pushScope() {
    variableStack.emplace_back();
}
void Parser::popScope() {
    if (!variableStack.empty()) {
        variableStack.pop_back();
    } else {
        ErrorHandler::throwError("Variable scope stack underflow", lexer.getLineNumber(lexer.getPosition()));
    }
}
Value Parser::getVariableValue(const std::string& name) {
    for (auto it = variableStack.rbegin(); it != variableStack.rend(); ++it) {
        auto found = it->find(name);
        if (found != it->end()) {
            return found->second;
        }
    }
    ErrorHandler::throwError("Undefined variable: " + name, lexer.getLineNumber(lexer.getPosition()));
    return Value{}; // unreachable, just to satisfy compiler
}
void Parser::setVariableValue(const std::string& name, Value value) {
    if (variableStack.empty()) {
        ErrorHandler::throwError("No variable scope available", lexer.getLineNumber(lexer.getPosition()));
    }
    variableStack.back()[name] = value;
}
int Parser::expr() {
    int result = term();
    while (currentToken.type == Token::OP && (currentToken.text == "+" || currentToken.text == "-")) {
        std::string op = currentToken.text;
        consume(Token::OP);
        int rhs = term();
        result = (op == "+") ? result + rhs : result - rhs;
    }
    return result;
}
void Parser::statement() {
    Debugger::log("Entering statement() with token: " + currentToken.text + ", Type: " + std::to_string(currentToken.type));
    switch (currentToken.type) {
        case Token::END:
            Debugger::log("Reached END token in statement()");
            return;
        case Token::IF:
            parseIfStatement();
            break;
        case Token::VAR:
            parseVarOrFunctionCall();
            break;
        case Token::WRITE:
            parseWriteStatement();
            break;
        case Token::FUNCTION:
            parseFunctionDefinition();
            break;
        case Token::RETURN:
            Debugger::log("Processing return statement");
            consume(Token::RETURN);
            lastReturnValue = expr();
            hasReturnValue = true;
            consume(Token::SEMICOLON);
            break;
        default:
            ErrorHandler::throwError("Unknown statement starting with token: " + currentToken.text, lexer.getLineNumber(lexer.getPosition()));
    }
}
bool Parser::parseCondition() {
    int left = expr();
    if (currentToken.type == Token::EQUAL || currentToken.type == Token::NOT_EQUAL || currentToken.type == Token::LESS || currentToken.type == Token::LESS_EQUAL || currentToken.type == Token::GREATER || currentToken.type == Token::GREATER_EQUAL) {
        Token op = currentToken;
        consume(op.type);
        int right = expr();
        switch (op.type) {
            case Token::EQUAL: return left == right;
            case Token::NOT_EQUAL: return left != right;
            case Token::LESS: return left < right;
            case Token::LESS_EQUAL: return left <= right;
            case Token::GREATER: return left > right;
            case Token::GREATER_EQUAL: return left >= right;
            default: ErrorHandler::throwError("Invalid comparison operator in condition", lexer.getLineNumber(lexer.getPosition())); return false;
        }
    } else {
        return left != 0;
    }
}
int Parser::term() {
    int result = factor();
    while (currentToken.type == Token::OP && (currentToken.text == "*" || currentToken.text == "/")) {
        std::string op = currentToken.text;
        consume(Token::OP);
        int rhs = factor();
        if (op == "*") result *= rhs;
        else {
            if (rhs == 0) ErrorHandler::throwError("Division by zero", lexer.getLineNumber(lexer.getPosition()));
            result /= rhs;
        }
    }
    return result;
}
int Parser::factor() {
    if (currentToken.type == Token::LPAREN) {
        consume(Token::LPAREN);
        int val = expr();
        consume(Token::RPAREN);
        return val;
    } else if (currentToken.type == Token::NUM) {
        int val = std::stoi(currentToken.text);
        consume(Token::NUM);
        return val;
    } else if (currentToken.type == Token::VAR) {
        std::string name = currentToken.text;
        Token nextToken = lexer.peekToken();
        if (nextToken.type == Token::LPAREN) {
            consume(Token::VAR);
            return parseFunctionCallArgsAndExecute(name);
        } else {
            consume(Token::VAR);
            Value val = getVariableValue(name);
            if (std::holds_alternative<int>(val)) {
                return std::get<int>(val);
            } else {
                ErrorHandler::throwError("Variable is not an integer: " + name, lexer.getLineNumber(lexer.getPosition()));
                return 0;
            }
        }
    } else if (currentToken.type == Token::OP && currentToken.text == "-") {
        consume(Token::OP);
        return -factor();
    } else {
        ErrorHandler::throwError("Unexpected token in factor: " + currentToken.text, lexer.getLineNumber(lexer.getPosition()));
        return 0;
    }
}
void Parser::printContextTokens(int contextSize) {
    int lexerPos = lexer.getPosition();
    lexer.setPosition(0);
    std::vector<std::pair<Token, int>> tokensWithPos;
    while (true) {
        int pos = lexer.getPosition();
        Token tok = lexer.nextToken();
        tokensWithPos.emplace_back(tok, pos);
        if (tok.type == Token::END) break;
    }
    int tokenIndex = 0;
    for (; tokenIndex < (int)tokensWithPos.size(); tokenIndex++) {
        if (tokensWithPos[tokenIndex].second >= lexerPos) break;
    }
    if (tokenIndex >= (int)tokensWithPos.size()) tokenIndex = (int)tokensWithPos.size() - 1;
    int start = std::max(0, tokenIndex - contextSize);
    int end = std::min((int)tokensWithPos.size() - 1, tokenIndex + contextSize);
    Debugger::log("---- Token Context ----");
    for (int i = start; i <= end; ++i) {
        const auto& [tok, pos] = tokensWithPos[i];
        std::string prefix = (i == tokenIndex) ? ">> " : "   ";
        Debugger::log(prefix + "Token[" + std::to_string(i) + "] at pos " + std::to_string(pos) + ": \"" + tok.text + "\" (type=" + std::to_string(tok.type) + ")");
    }
    Debugger::log("------------------------");
    lexer.setPosition(lexerPos);
}
void Parser::parseIfStatement() {
    Debugger::log("Processing if statement");
    consume(Token::IF);
    consume(Token::LPAREN);
    bool condition = parseCondition();
    consume(Token::RPAREN);
    size_t trueBlockStart = lexer.getPosition();
    returnStates.push({lexer.getPosition(), currentToken});
    consume(Token::LBRACE);
    int braceCount = 1;
    Debugger::log("Scanning to find end of if block");
    while (braceCount > 0) {
        Token tok = lexer.nextToken();
        Debugger::log("Skipping token in if-block: " + tok.text + " (type=" + std::to_string(tok.type) + ")");
        if (tok.type == Token::LBRACE) braceCount++;
        else if (tok.type == Token::RBRACE) braceCount--;
    }

    size_t falseBlockStart = lexer.getPosition();

    // Restore to before if-block for possible execution
    auto [restorePos, restoreToken] = returnStates.top();
    returnStates.pop();
    lexer.setPosition(restorePos);
    currentToken = restoreToken;

    if (condition) {
        Debugger::log("Condition is true. Executing if block");
        consume(Token::LBRACE);
        braceCount = 1;
        while (braceCount > 0 && currentToken.type != Token::END && !hasReturnValue) {
            Debugger::log("Executing token in if block: " + currentToken.text + " (type=" + std::to_string(currentToken.type) + ")");
            if (currentToken.type == Token::LBRACE) {
                braceCount++;
                consume(Token::LBRACE);
            } else if (currentToken.type == Token::RBRACE) {
                braceCount--;
                consume(Token::RBRACE);
            } else {
                statement();
            }
        }
    } else {
        Debugger::log("Condition is false. Skipping if block");
        lexer.setPosition(falseBlockStart);
        currentToken = lexer.nextToken(); // Sync token stream
    }

    // Handle optional else block
    if (currentToken.type == Token::ELSE) {
        Debugger::log("Found else block");
        consume(Token::ELSE);
        returnStates.push({lexer.getPosition(), currentToken});
        consume(Token::LBRACE);
        braceCount = 1;
        Debugger::log("Scanning to find end of else block");
        while (braceCount > 0) {
            Token tok = lexer.nextToken();
            Debugger::log("Skipping token in else block: " + tok.text + " (type=" + std::to_string(tok.type) + ")");
            if (tok.type == Token::LBRACE) braceCount++;
            else if (tok.type == Token::RBRACE) braceCount--;
        }

        size_t endElse = lexer.getPosition();
        auto [elsePos, elseToken] = returnStates.top();
        returnStates.pop();

        if (!condition) {
            Debugger::log("Condition was false. Executing else block");
            lexer.setPosition(elsePos);
            currentToken = elseToken;
            consume(Token::LBRACE);
            braceCount = 1;
            while (braceCount > 0 && currentToken.type != Token::END && !hasReturnValue) {
                Debugger::log("Executing token in else block: " + currentToken.text + " (type=" + std::to_string(currentToken.type) + ")");
                if (currentToken.type == Token::LBRACE) {
                    braceCount++;
                    consume(Token::LBRACE);
                } else if (currentToken.type == Token::RBRACE) {
                    braceCount--;
                    consume(Token::RBRACE);
                } else {
                    statement();
                }
            }
        } else {
            Debugger::log("Skipping else block since condition was true");
            lexer.setPosition(endElse);
            currentToken = lexer.nextToken(); // Sync after skipping else
        }
    }
}
void Parser::parseVarOrFunctionCall() {
    std::string name = currentToken.text;
    Token nextToken = lexer.peekToken();
    if (nextToken.type == Token::ARROW) {
        Debugger::log("Detected variable assignment to " + name);
        consume(Token::VAR);
        consume(Token::ARROW);
        if (currentToken.type == Token::STRING) {
            setVariableValue(name, currentToken.text);
            consume(Token::STRING);
        } else {
            int value = expr(); 
            setVariableValue(name, value);
        }
        consume(Token::SEMICOLON);
    }
    else if (nextToken.type == Token::LPAREN) {
        Debugger::log("Detected function call to " + name);
        consume(Token::VAR);
        parseFunctionCallArgsAndExecute(name);
        consume(Token::SEMICOLON);
    }
    else {
        ErrorHandler::throwError("Expected '->' or '(' after variable");
    }
}
std::vector<Value> Parser::parseFunctionArguments(const std::unordered_map<std::string, Value>& currentScope) {
    std::vector<Value> args;
    consume(Token::LPAREN);
    Debugger::log("Parsing function arguments...");
    if (currentToken.type != Token::RPAREN) {
        while (true) {
            Value argVal;
            Debugger::log("Current token in args: " + currentToken.text + " (type " + std::to_string(currentToken.type) + ")");
            if (currentToken.type == Token::STRING) {
                argVal = currentToken.text;
                Debugger::log("Parsed string argument: " + currentToken.text);
                consume(Token::STRING);
            }
            else if (currentToken.type == Token::NUM) {
                argVal = std::stoi(currentToken.text);
                Debugger::log("Parsed numeric argument: " + currentToken.text);
                consume(Token::NUM);
            }
            else if (currentToken.type == Token::VAR) {
                std::string varName = currentToken.text;
                Debugger::log("Parsed variable argument: " + varName);
                consume(Token::VAR);
                if (currentScope.find(varName) != currentScope.end()) {
                    argVal = currentScope.at(varName);
                    Debugger::log("Resolved variable " + varName + " to value");
                } else {
                    ErrorHandler::throwError("Undefined variable: " + varName);
                }
            }
            else {
                ErrorHandler::throwError("Invalid argument in function call");
            }
            args.push_back(argVal);
            if (currentToken.type == Token::COMMA) {
                consume(Token::COMMA);
                Debugger::log("Found comma, continuing to next argument...");
            } else {
                break;
            }
        }
    }
    consume(Token::RPAREN);
    consume(Token::SEMICOLON);
    Debugger::log("Completed parsing arguments. Total args: " + std::to_string(args.size()));
    return args;
}
int Parser::parseFunctionCallArgsAndExecute(const std::string& funcName) {
    Debugger::log("Detected function call to " + funcName);
    auto args = parseFunctionArguments(variableStack.back());
    if (functions.find(funcName) == functions.end())
        ErrorHandler::throwError("Undefined function: " + funcName);
    auto& func = functions[funcName];
    if (args.size() != func.params.size())
        ErrorHandler::throwError("Function " + funcName + " expects " + std::to_string(func.params.size()) + " arguments, but got " + std::to_string(args.size()));
    Debugger::log("Executing function '" + funcName + "' at position " + std::to_string(func.position));
    Debugger::log("Pushing return state: pos=" + std::to_string(lexer.getPosition()));
    returnStates.push({lexer.getPosition(), currentToken});
    printContextTokens();
    lexer.setPosition(func.position);
    currentToken = lexer.nextToken();
    consume(Token::LBRACE);
    pushScope();
    for (size_t i = 0; i < func.params.size(); ++i)
        setVariableValue(func.params[i], args[i]);
    int braceCount = 1;
    hasReturnValue = false;
    lastReturnValue = 0;
    Debugger::log("Entering function body...");
    while (braceCount > 0 && currentToken.type != Token::END && !hasReturnValue) {
        if (currentToken.type == Token::LBRACE) {
            braceCount++;
            consume(Token::LBRACE);
        } else if (currentToken.type == Token::RBRACE) {
            braceCount--;
            consume(Token::RBRACE);
            if (braceCount == 0) break;
        } else
            statement();
    }
    Debugger::log("Exiting function '" + funcName + "' with return value " + std::to_string(lastReturnValue));
    popScope();
    Debugger::log("Popping return state");
    auto [pos, savedToken] = returnStates.top();
    returnStates.pop();
    Debugger::log("Restoring lexer position to " + std::to_string(pos));
    lexer.setPosition(pos);
    currentToken = savedToken;
    Debugger::log("Finished executing function '" + funcName + "'");
    return lastReturnValue;
}
void Parser::parseWriteStatement() {
    Debugger::log("Processing write statement");
    consume(Token::WRITE);
    consume(Token::LPAREN);
    if (currentToken.type == Token::VAR) {
        std::string varName = currentToken.text;
        consume(Token::VAR);
        if (!variableStack.empty() && variableStack.back().find(varName) != variableStack.back().end()) {
            const Value& val = variableStack.back().at(varName);
            if (std::holds_alternative<int>(val))
                std::cout << std::get<int>(val) << std::endl;
            else
                std::cout << std::get<std::string>(val) << std::endl;
        } else
            Debugger::log("Undefined variable: " + varName);
    } else if (currentToken.type == Token::STRING) {
        std::cout << currentToken.text << std::endl;
        consume(Token::STRING);
    } else
        ErrorHandler::throwError("Invalid argument to write()");
    consume(Token::RPAREN);
    consume(Token::SEMICOLON);
}
void Parser::parseFunctionDefinition() {
    Debugger::log("Parsing function definition");
    consume(Token::FUNCTION);
    if (currentToken.type != Token::VAR)
        ErrorHandler::throwError("Expected function name");
    std::string funcName = currentToken.text;
    consume(Token::VAR);
    consume(Token::LPAREN);
    std::vector<std::string> params;
    if (currentToken.type != Token::RPAREN) {
        while (true) {
            if (currentToken.type != Token::VAR)
                ErrorHandler::throwError("Expected parameter name");
            params.push_back(currentToken.text);
            consume(Token::VAR);
            if (currentToken.type == Token::COMMA)
                consume(Token::COMMA);
            else
                break;
        }
    }
    functions[funcName] = {lexer.getPosition(), params};
    consume(Token::RPAREN);
    Debugger::log("Stored function '" + funcName + "' at position " + std::to_string(lexer.getPosition()));
    consume(Token::LBRACE);
    int braceCount = 1;
    while (braceCount > 0) {
        Token tok = lexer.nextToken();
        if (tok.type == Token::LBRACE) braceCount++;
        else if (tok.type == Token::RBRACE) braceCount--;
    }
    currentToken = lexer.nextToken();
}
int Parser::parseExpression() {
    int val = expr();
    if (currentToken.type != Token::END)
        ErrorHandler::throwError("Unexpected tokens after expression");
    return val;
}
void Parser::parse() {
    while (currentToken.type != Token::END) {
        if (currentToken.type == Token::RBRACE) {
            Debugger::log("Skipping RBRACE at top level");
            currentToken = lexer.nextToken();
            continue;
        }
        if (currentToken.type == Token::FUNCTION) {
            Debugger::log("Skipping over function definition at top level");
            parseFunctionDefinition();
            continue;
        }
        if (currentToken.type == Token::SEMICOLON) {
            currentToken = lexer.nextToken();
            continue;
        }
        statement();
    }
}